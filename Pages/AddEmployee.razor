@page "/AddEmployee"
@using BlazorUserManagerApp.Models
@using BlazorUserManagerApp.Services
@using static BlazorUserManagerApp.Components.Warning
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h3>AddEmployee</h3>
@attribute [Authorize(Roles="Admin")]


<Modal @ref="alertModal" />
    <UICard>
        <div class="row user-detail-row">
            <h3>Add New Employee</h3>
            <div class="form-group">
                <EditForm Model="@addEmployeeForm" OnValidSubmit="AddNewEmployee">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <p>
                        <div class="form-floating mb-3">
                        <InputText class="form-control" id="floatingInput" required placeholder="Full Name here" @bind-Value="addEmployeeForm.FullName" />
                            <label for="floatingInput">Full Name</label>
                        </div>
                        <div class="form-floating mb-3">
                        <InputText class="form-control" id="floatingInput" required aria-required="true" minlength="3" maxlength="32" placeholder="UserName here" @bind-Value="addEmployeeForm.UserName" />
                            <label for="floatingInput">UserName</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText class="form-control" id="floatingInput" required aria-required="true" type="email" placeholder="Email here" @bind-Value="addEmployeeForm.Email" />
                            <label for="floatingInput">Email</label>
                        </div>
                        <div class="form-floating mb-3">
                        <InputText class="form-control" id="floatingInput" required type="password" placeholder="Password here" @bind-Value="addEmployeeForm.PasswordHash" />
                            <label for="floatingInput">Password</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText class="form-control" id="floatingInput" placeholder="PhoneNumber here" @bind-Value="addEmployeeForm.PhoneNumber" />
                            <label for="floatingInput">PhoneNumber</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputNumber class="form-control" id="floatingInput" placeholder="Salary here" @bind-Value="addEmployeeForm.Salary" />
                            <label for="floatingInput">Salary</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputSelect shadow rounded id="floatingInput" placeholder="Employee here" @bind-Value="addEmployeeForm.Type" class="form-select">
                                @foreach (EmployeeType type in Enum.GetValues(typeof(EmployeeType)))
                                {
                                    <option value="@type">@type.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <label for="floatingInput">Employment Type</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputSelect shadow rounded id="floatingInput" placeholder="Role here" @bind-Value="addEmployeeForm.Role" class="form-select">
                                @foreach (Roles role in Enum.GetValues(typeof(Roles)))
                                {
                                    <option value="@role">@role.GetDisplayName()</option>
                                }
                            </InputSelect>
                            <label for="floatingInput">Role</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText class="form-control" id="floatingInput" placeholder="Avatar Url" @bind-Value="addEmployeeForm.Avatar" />
                            <label for="floatingInput">Avatar Url</label>
                        </div>
                    </p>
                    <button class="btn btn-outline-secondary" type="submit">Submit</button>
                </EditForm>
            </div>
        </div>
    </UICard>


@code {
    [Inject] private IEmployeeService employeeService { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }
    private Modal alertModal = default!;

    private Employee addEmployeeForm = new();

    protected override async Task OnInitializedAsync()
    {
        var currentUser = GetAuthenticationStateAsync.GetAuthenticationStateAsync().Result.User.Identity.Name;
        var myUserDetails = await employeeService.GetEmployeeFromUsername(currentUser);
        var userRoles = await employeeService.GetEmployeeRoles(myUserDetails.Employee);
        if (!userRoles.Contains("Admin"))
        {
            navigationManager.NavigateTo("/");
        }
    }

    private async Task AddNewEmployee()
    {

        var parameters = new Dictionary<string, object>();
        parameters.Add("Message", "Are you sure you want to Create this user?");
        parameters.Add("Type", "Alert");
        parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this, async () =>
        {
            addEmployeeForm.Active = true;
            var response = await employeeService.AddEmployee(addEmployeeForm);

            var parameters = new Dictionary<string, object>();
            parameters.Add("Message", response.Message);
            parameters.Add("Type", "Response");
            parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this, response.StatusCode == 200 ? () => navigationManager.Refresh() : () => alertModal.HideAsync()));
            parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, response.StatusCode == 200 ? () => navigationManager.Refresh() : () => alertModal.HideAsync()));
            await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);
        }));
        parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);
    }
}
