@page "/employee/{employeeID:int}"
@using BlazorUserManagerApp.Models
@using BlazorUserManagerApp.Services
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@using static BlazorUserManagerApp.Components.Warning
@using BlazorUserManagerApp.Data
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Security.Claims
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@attribute [Authorize(Roles = "Admin")]



    <Modal @ref="alertModal" />
    <UICard>
        <div class="row user-detail-row">
            <h3>@(addEmployeeForm.ChangePaswword ? "Change Password" : "Edit Employees")</h3>
            <div class="form-group">
                @if (addEmployeeForm.ChangePaswword && addEmployeeForm.UserName == currentUser)
                {
                    <EditForm Model="@changePasswordForm" OnValidSubmit="ChangeMyPassword">
                        <DataAnnotationsValidator />
                        <div class="form-floating mb-3">
                            <InputText type="password" class="form-control" id="floatingInput" placeholder="New Password here" @bind-Value="changePasswordForm.PasswordHash" />
                            <label for="floatingInput">New Password</label>
                        </div>

                        

                        <div class="form-floating mb-3">
                            <InputText type="password" class="form-control" id="floatingInput" placeholder="Confirm New Password here" @bind-Value="ConfirmPassword" />
                            <label for="floatingInput">Confirm New Password</label>
                        </div>

                        @if (changePasswordForm.PasswordHash != null)
                        {
                            <div>
                                <label class="text-@(changePasswordForm.PasswordHash == ConfirmPassword?"secondary":"danger")">Password and Confirm Are @(changePasswordForm.PasswordHash == ConfirmPassword ? "" : "NOT") the same</label>
                            </div>
                            <div>
                                <label class="text-@(Regex.IsMatch(changePasswordForm.PasswordHash, "^(?=.*[A-Za-z])")?"secondary":"danger")">Password @(Regex.IsMatch(changePasswordForm.PasswordHash, "^(?=.*[A-Za-z])") ? "contains" : "MUST CONTAIN") at least one Alphabetic character</label>
                            </div>
                            <div>
                                <label class="text-@(Regex.IsMatch(changePasswordForm.PasswordHash,"(?=.*?[0-9])")?"secondary":"danger")">Password @(Regex.IsMatch(changePasswordForm.PasswordHash, "(?=.*?[0-9])") ? "contains" : "MUST CONTAIN") at least one number</label>
                            </div>
                            <div>
                                <label class="text-@(Regex.IsMatch(changePasswordForm.PasswordHash,"(?=.*?[#?!@$%^&*-])")?"secondary":"danger")">Password @(Regex.IsMatch(changePasswordForm.PasswordHash, "(?=.*?[#?!@$%^&*-])") ? "contains" : "MUST CONTAIN") at least one special character</label>
                            </div>
                            <div>
                                <label class="text-@(changePasswordForm.PasswordHash.Length>8 && changePasswordForm.PasswordHash.Length<16?"secondary":"danger")">Password @(changePasswordForm.PasswordHash.Length > 8 && changePasswordForm.PasswordHash.Length < 16 ? "is" : "MUST BE") between 8 and 16 characters</label>
                            </div>
                        }

                        <div>

                        <button type="submit" class="btn btn-primary">Submit</button>
                        </div>

                    </EditForm>
                    
                }
                else
                {
                    <EditForm Model="@addEmployeeForm" OnValidSubmit="EditEmployee">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <p>
                            <div class="form-floating mb-3">
                                <InputText class="form-control" id="floatingInput" placeholder="Name here" @bind-Value="addEmployeeForm.FullName" />
                                <label for="floatingInput">Name</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputText class="form-control" id="floatingInput" placeholder="UserName here" @bind-Value="addEmployeeForm.UserName" />
                                <label for="floatingInput">UserName</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputText class="form-control" id="floatingInput" placeholder="E-Mail here" @bind-Value="addEmployeeForm.Email" />
                                <label for="floatingInput">E-Mail</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputNumber class="form-control" id="floatingInput" placeholder="Salary here" @bind-Value="addEmployeeForm.Salary" />
                                <label for="floatingInput">Salary</label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputSelect shadow rounded id="floatingInput" placeholder="Employee here" @bind-Value="addEmployeeForm.Type" class="form-select">
                                    @foreach (EmployeeType type in Enum.GetValues(typeof(EmployeeType)))
                                    {
                                        <option value="@type">@type.GetDisplayName()</option>
                                    }
                                </InputSelect>
                                <label for="floatingInput">Employment Type</label>
                            </div>
                            
                            <div class="form-floating mb-3">
                                <InputText class="form-control" id="floatingInput" placeholder="Img here" @bind-Value="addEmployeeForm.Avatar" />
                                <label for="floatingInput">Image Url</label>
                            </div>
                        </p>
                        <button class="btn btn-outline-secondary" type="submit">Update</button>
                    @if (employee != null && currentUser != employee.UserName && userRoles.Contains("Admin"))
                    {
                        <div class="btn btn-danger mx-2" typeof="button" onclick="@showDeleteConfirmationModal">Delete</div>
                    }
                        @if (currentUser == addEmployeeForm?.UserName)
                        {
                            <div class="btn btn-danger mx-1" typeof="button" onclick="@ChangePassword">Change Password</div>
                        }
                        else
                        {
                            <div class="btn btn-danger mx-1" typeof="button" onclick="@ResetPassword">Reset Password</div>
                        }
                    @if (employee != null && currentUser != employee.UserName && userRoles.Contains("Admin"))
                    {
                        @if (addEmployeeForm.Active)
                        {
                            <div class="btn btn-danger mx-1" typeof="button" onclick="@ChangeActivationState">DeActivate User</div>
                        }
                        else
                        {
                            <div class="btn btn-danger mx-1" typeof="button" onclick="@ChangeActivationState">Activate User</div>
                        }
                    }
                        

                    </EditForm>
            @if (employee !=null && userRoles.Contains("Admin"))
            {
                        @if (userRoles != null)
                        {
                            <ul class="list-group my-3">
                                @foreach (string employeeRole in userRoles)
                                {
                                    <li class="list-group-item d-flex justify-content-between">
                                        @employeeRole
                                        <button class="btn btn-danger" onclick="@(()=>deleteRoleButtonHandler(employee,employeeRole))"> Delete</button>
                                    </li>
                                }


                            </ul>
                        }
                        
                    <div class="form-floating my-3">
                        <InputSelect shadow rounded id="floatingInput" placeholder="Position here" @bind-Value="addEmployeeForm.Role" class="form-select">
                            @foreach (Roles position in Enum.GetValues(typeof(Roles)))
                            {
                                <option value="@position">@position.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <label for="floatingInput">Position</label>
                    </div>
                    
                    
                    <div>
                        <button class="btn btn-primary" onclick="@setEmployeeRoleAlert">Set Position</button>
                    </div>
                    }
                }
                
            </div>
        </div>
    </UICard>




@code {

    [Parameter] public int employeeID { get; set; }

    [Inject] private IEmployeeService employeeService { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }
    private Modal alertModal = default!;


    private Employee addEmployeeForm = new();
    private ChangePasswordModel changePasswordForm = new();
    private bool showDeleteModal = false;
    private bool showWarning = false;
    private string Warning_Message = "";
    private WarningType Warning_Type;
    private Employee employee;
    private string currentUser;
    private string ConfirmPassword;
    private IList<string> userRoles;


    protected override async Task OnInitializedAsync()
    {
        currentUser =GetAuthenticationStateAsync.GetAuthenticationStateAsync().Result.User.Identity.Name;


        var response = await employeeService.GetEmployeeFromId(employeeID);
        employee = response.Employee;

        addEmployeeForm.Salary = employee.Salary;
        addEmployeeForm.FullName = employee.FullName;
        addEmployeeForm.Type = employee.Type;
        addEmployeeForm.Role = employee.Role;
        addEmployeeForm.Avatar = employee.Avatar;
        addEmployeeForm.UserName = employee.UserName;
        addEmployeeForm.Email = employee.Email;
        addEmployeeForm.ChangePaswword = employee.ChangePaswword;
        addEmployeeForm.Active = employee.Active;
        var myDetails = await employeeService.GetEmployeeFromUsername(currentUser);
        userRoles = await employeeService.GetEmployeeRoles(myDetails.Employee);
        if (!userRoles.Contains("Admin") && currentUser != employee.UserName)
        {
            navigationManager.NavigateTo("/");
        }

    }

    private async Task EditEmployee()
    {
        employee.Salary = addEmployeeForm.Salary;
        employee.FullName = addEmployeeForm.FullName;
        employee.Type = addEmployeeForm.Type;
        employee.Role = addEmployeeForm.Role;
        employee.Avatar = addEmployeeForm.Avatar;
        employee.UserName = addEmployeeForm.UserName;
        employee.Email = addEmployeeForm.Email;



        var response = await employeeService.UpdateEmployee(employee);

        var parameters = new Dictionary<string, object>();
        parameters.Add("Message", response.Message);
        parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);
    }

    private async Task DeleteEmployee()
    {
        employee.Salary = addEmployeeForm.Salary;
        employee.FullName = addEmployeeForm.FullName;
        employee.Type = addEmployeeForm.Type;
        employee.Role = addEmployeeForm.Role;
        employee.Avatar = addEmployeeForm.Avatar;
        employee.UserName = addEmployeeForm.UserName;
        employee.Email = addEmployeeForm.Email;



        var response = await employeeService.DeleteEmployee(employee);

        var parameters = new Dictionary<string, object>();
        parameters.Add("Message", response.Message);
        parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => navigationManager.NavigateTo("/employees")));
        parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => navigationManager.NavigateTo("/employees")));
        await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);
    }


    private async void showDeleteConfirmationModal()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Message", "Are you sure you want to delete this user");
        parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this,DeleteEmployee));
        parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);
    }

    private async void ResetPassword()
    {
        employee.ChangePaswword = true;
        var updateRes = await employeeService.UpdateEmployee(employee);
        var resetRes = await employeeService.ResetPassword(employee,"Password123!");

        var parameters = new Dictionary<string, object>();
        parameters.Add("Message", "UpdateRes: " + updateRes.Message + " ResetRes: " + resetRes.Message);
        parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);
    }

    private void ChangePassword() => addEmployeeForm.ChangePaswword = true;
    private async void ChangeMyPassword()
    {
        if (changePasswordForm.PasswordHash == ConfirmPassword && Regex.IsMatch(ConfirmPassword, "^(?=.*[A-Za-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,16}"))
        {
            employee.ChangePaswword = false;
            employee.LastPasswordChange = DateTime.Now;
            var updateRes = await employeeService.UpdateEmployee(employee);
            var resetRes = await employeeService.ResetPassword(employee, changePasswordForm.PasswordHash);


            var parameters = new Dictionary<string, object>();
            parameters.Add("Message","UpdateRes: "+ updateRes.Message + " ResetRes: " + resetRes.Message);
            parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => navigationManager.NavigateTo("/")));
            parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => navigationManager.NavigateTo("/")));
            await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);
        }
    }

    private async void ChangeActivationState()
    {



        var parameters = new Dictionary<string, object>();
        parameters.Add("Message", "do you want to " + (!employee.Active?"Activate":"DeActivate") + " this user?");
        parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this, async () => {
            employee.Active = !employee.Active;
            var updateRes = await employeeService.UpdateEmployee(employee);
            if (updateRes.StatusCode == 200)
            {
                addEmployeeForm.Active = employee.Active;
                await alertModal.HideAsync();
            }
        }));
        parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);
        

    }
    
    private async void setEmployeeRoleAlert()
    {

        var parameters = new Dictionary<string, object>();
        parameters.Add("Message", "Are you sure you want to make this User "+addEmployeeForm.Role.GetDisplayName());
        parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this, setEmployeeRole));
        parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);
        



    }
    private async void setEmployeeRole()
    {
        var getRoleUserCount = await employeeService.GetUserCountWithRole(addEmployeeForm.Role.GetDisplayName());
        if(addEmployeeForm.Role == Roles.Admin && getRoleUserCount < 20)
        {
            var roleRes = await employeeService.setEmployeeToRole(employee, addEmployeeForm.Role);
            if (roleRes.StatusCode == 200)
            {
                navigationManager.Refresh();
            }
        }else if(addEmployeeForm.Role != Roles.Admin && getRoleUserCount <= 50)
        {
            var roleRes = await employeeService.setEmployeeToRole(employee, addEmployeeForm.Role);
            if (roleRes.StatusCode == 200)
            {
                navigationManager.Refresh();
            }
        }
    }

    private async void deleteRoleButtonHandler(Employee employee,string role)
    {
        var res =await employeeService.DeleteEmployeeRole(employee, role);

        var parameters = new Dictionary<string, object>();
        parameters.Add("Message", res.Message);
        parameters.Add("OnAcceptCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        parameters.Add("OnCancelCallback", EventCallback.Factory.Create<MouseEventArgs>(this, () => alertModal.HideAsync()));
        await alertModal.ShowAsync<AlertModal>(title: "Alert", parameters: parameters);

        if(res.StatusCode == 200)
        {
            navigationManager.Refresh();
            
        }

    }

}
